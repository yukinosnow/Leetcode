class Solution {
    int result=Integer.MAX_VALUE;
    public int mctFromLeafValues(int[] arr) {
        List<Integer>list=new ArrayList<>();
        for(int i=0;i<arr.length;i++)
            list.add(arr[i]);
        helper(list,0);
        return result;
    }
    public void helper(List<Integer>list, int sum)
    {
        if(list.size()==1)
        {
            result=Math.min(sum,result);
            return;
        }
        int minPos=-1;
        int minVal=Integer.MAX_VALUE;
        for(int i=0;i<list.size();i++)
        {
            if(list.get(i)<minVal)
            {
                minPos=i;
                minVal=list.get(i);
            }
        }
        int count=0;
        if(minPos==0)
            count=list.get(minPos)*list.get(minPos+1);
        else if(minPos==list.size()-1)
            count=list.get(minPos)*list.get(minPos-1);
        else
            count=Math.min(list.get(minPos+1),list.get(minPos-1))*list.get(minPos);
        list.remove(minPos);
        helper(list,sum+count);
    }
}