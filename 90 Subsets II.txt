class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>>result=new ArrayList<>();
        List<Integer>empty=new ArrayList<>();
        result.add(empty);
        if(nums.length==0)
            return result;
        helper(result,nums,0);
        return result;
    }
    public int helper(List<List<Integer>>result, int[] nums, int location)
    {
        if(nums.length-1==location)
        {
            List<Integer>last=new ArrayList<>(result.get(0));
            last.add(nums[location]);
            result.add(last);
            return 1;
        }
        int start=0;
        int addCount=helper(result,nums,location+1);
        if(nums[location]==nums[location+1])
        {
            start=result.size()-addCount;
        }
        int length=result.size();
        for(int i=start;i<length;i++)
        {
            List<Integer>copy=new ArrayList<>(result.get(i));
            copy.add(nums[location]);
            result.add(copy);
        }
        return length-start;
    }
}