class Solution {
    public int maxSumMinProduct(int[] nums) {
        int mol=1000000007;
        long result=0;
        long[] prefixSum=new long[nums.length+1];
        for(int i=1;i<prefixSum.length;i++)
        {
            prefixSum[i]=nums[i-1]+prefixSum[i-1];
        }
        Deque<Integer>dq=new LinkedList<>();
        for(int i=0;i<nums.length;i++)
        {
            while(!dq.isEmpty()&&nums[dq.getLast()]>=nums[i])
            {
                int pos=dq.pollLast();
                int prevP=0;
                if(!dq.isEmpty())
                    prevP=dq.getLast()+1;
                result=Math.max(result,(prefixSum[i]-prefixSum[prevP])*nums[pos]);
            }
            dq.add(i);
        }
        while(!dq.isEmpty())
        {
            int pos=dq.pollLast();
            int prevP=0;
            if(!dq.isEmpty())
                prevP=dq.getLast()+1;
            result=Math.max(result,(prefixSum[prefixSum.length-1]-prefixSum[prevP])*nums[pos]);
        }
        return (int)(result%mol);
    }
}