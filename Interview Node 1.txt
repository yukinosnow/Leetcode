// Class name must be "Main"
// Libraries included:
// json simple, guava, apache commons lang3, junit, jmock

Move Zeros:
3:04	-> Ideating
	-> Asked some clarifying questions
	-> Reiterated the question for both input and output
3:06	-> Gave brute force idea with extra space
	-> Two pointer with both pointers from the right
	-> TC: O(n), SC: O(1)
3:08	-> Started coding
3:13 	-> Done coding
	-> Small bug of ++ instead of --, be careful
	-> Explained with an example and pretty clear and quick

Merge intervals
3:17	-> Asked some clarifying questions, input data types
	-> Contiguous intervals like [2,5] [5,7]
	-> TC O(arr1.len + arr2.len), SC: O(arr1.len + arr2.len)

            
3:23	-> Started to code
	-> Design the array of arrays to array of Interval objects with start and end, will make you code look clean and easy to explain without [0] and [1]
3:28	-> Went ahead with merging and sorting two interval lists
	-> 
3:43	-> came up with optimal solution

Number of contiguous subarrays summing to K
3:44
3;53	->


    
/*
/*
Given and integer array count number of contiguous
subarrays which sums up to K
input:
[0,0] K = 0
output:
3
explanation:
[0]
[0,0]
[0]

input:
[1,1,1] K= 2
output:
2
explanation:
[1,1]
[1,1]

input:
[0,1,2,-3,3] K=3
[0,1,3,0,3]
[0,1,2],[1,2],[0,1,2,-3,3],[3],[1,2,-3,3]
hashmap=[-1,0],[0,0],[1,1],[2,3],[3,0]
result=2
output:
5
*/


/*
Merge two sorted interval lists
Intervals in each list do not overlap

                                n1
arr1 = [[1,3], [4,5], [7,10], [16, 17]]
arr2 = [[2,3], [4,8], [11,15]]
                                
temp=

result=[1,3] [4,10] [11,15] [16,17]
//[4,5],[5,6]=[4,6]

Expected result:
{[1,3], [4, 10], [11, 15], [16, 17]}

*/

/*
Move Zeros:
Given an integer array move all 0's to left and  maintain the relative positions
of elements which are greater than 0


input: [0,5,0,0,6,7,0,0,4,2]
output: [0,0,0,0,0,5,6,7,4,2]

input: [0,5,6,7,0,2]
output: [0,0,5,6,7,2]

*/
//[0,5,0,0,6,7,0,0,4,2]
//[0,0,0,0,0,5,6,7,4,2]
//   n       z    

class Main {
    public static List<List<Integer>> MergeInterval(int[][]arr1, int[][]arr2)
    {
        List<List<Integer>>result=new ArrayList<>();
        List<Integer>
    }
    
    class Intvl {
      s;
      e;
    }
    
    public static List<List<Integer>> MergeInterval(int[][]arr1, int[][]arr2)
    {
        List<List<Integer>>result=new ArrayList<>();
        List<List<Integer>>input=new ArrayList<>();
        for(int i=0;i<arr1.length;i++)
        {
            List<Integer>temp=Arrays.asList(arr1[i][0],arr1[i][1]);
            input.add(temp);
        }
        for(int i=0;i<arr2.length;i++)
        {
            List<Integer>temp=Arrays.asList(arr2[i][0],arr2[i][1]);
            input.add(temp);
        }
        Collections.sort(input,(List<Integer>a, List<Integer>b)->
                         {
                             if(a.get(0)==b.get(0))
                                 return b.get(1)-a.get(1);
                             return a.get(0)-b.get(0);
                         });
        if(input.size()==0)
            return result;
        List<Integer>temp=input.get(0);
        for(int i=1;i<input.size();i++)
        {
            int start=input.get(i).get(0);
            int end=input.get(i).get(1);
            int prevStart=temp.get(0);
            int prevEnd=temp.get(1);
            if((prevStart<=start&&start<=prevEnd)||(prevStart<=end&&end<=prevEnd))
            {
                temp.set(0,Math.min(start,prevStart));
                temp.set(1,Math.max(end,prevEnd));
            }
            else
            {
                result.add(temp);
                temp.set(0,start);
                temp.set(1,end);
            }
        }
        return result;
                
       
        }
    }
    
    
    public static void main(int[] arr) {
        System.out.println("Hello, world!");
        
        int zero=arr.length-1;
        int nozero=arr.length-1;
        while(zero>=0&&nozero>=0)
        {
            while(zero>=0&&arr[zero]!=0)
            {
                zero--;
            }
            while(nozero>=0&&arr[nozero]==0)
            {
                nozero--;
            }
            if(zero>nozero)
            {
                nozero=zero;
            }
            else
            {
                Swap(arr,zero,nozero);
            }
        }
    }
    
}
