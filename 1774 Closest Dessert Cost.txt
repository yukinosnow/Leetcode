class Solution {
    int result=Integer.MAX_VALUE;
    int diff=Integer.MAX_VALUE;
    public int closestCost(int[] baseCosts, int[] toppingCosts, int target) {
        List<Set<Integer>>allPossibility=new ArrayList<>();
        result=baseCosts[0];
        diff=Math.abs(target-result);
        for(int i=0;i<baseCosts.length;i++)
        {
            int basePrice=baseCosts[i];
            Queue<Integer>pricing=new LinkedList<Integer>();
            pricing.add(basePrice);
            Set<Integer>uniquePrice=new HashSet<>();
            GenerateAllPossibility(toppingCosts,pricing,uniquePrice,target);
            allPossibility.add(uniquePrice);
        }
        return result;
    }
    public void GenerateAllPossibility(int[]toppingCosts, Queue<Integer>pricing, Set<Integer>uniquePrice,int target)
    {
        for(int i=0;i<toppingCosts.length;i++)
        {
            int length=pricing.size();
            while(length>0)
            {
                int price=pricing.remove();
                pricing.add(price);
                pricing.add(price+toppingCosts[i]);
                pricing.add(price+toppingCosts[i]+toppingCosts[i]);
                length--;
            }
        }
        while(!pricing.isEmpty())
            CompareValue(pricing.remove(),target);
    }
    public void CompareValue(int price, int target)
    {
        if(price==0)
            return;
        int localDiff=Math.abs(target-price);
        if(localDiff<diff||localDiff==diff&&price<result)
        {
            diff=localDiff;
            result=price;
        }
    }

}