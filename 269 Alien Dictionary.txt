class Solution {
    class Node{
        char letter;
        int level=0;
        Set<Node>nextNodes;
        Set<Node>prevNodes;
        public Node(char letter)
        {
            this.letter=letter;
            nextNodes=new HashSet<>();
            prevNodes=new HashSet<>();
        }
    }
    int count=0;
    String result="";
    private Map<Character, Boolean> seen = new HashMap<>();
    public String alienOrder(String[] words) {
        Map<Character,Node>nodeCollection=new HashMap<>();
        BuildAllNodes(nodeCollection,words);
        if(!BuildRelationship(nodeCollection,words))
            return "";
        
        for(Map.Entry<Character,Node>entry:nodeCollection.entrySet())
        {
            Node cnode=entry.getValue();
            boolean check = dfs(cnode.letter,nodeCollection);
            if (!check) return "";
        }
        if(result.length()!=nodeCollection.size())
            return "";
        return result;
        
    }
    private boolean dfs(Character c,Map<Character,Node>nodeCollection) {
        if (seen.containsKey(c)) {
            return seen.get(c); // If this node was grey (false), a cycle was detected.
        }
        seen.put(c, false);
        for (Node next : nodeCollection.get(c).nextNodes) {
            boolean check = dfs(next.letter,nodeCollection);
            if (!check) return false;
        }
        seen.put(c, true);
        result=Character.toString(c)+result;
        return true;
    }
    public boolean BuildRelationship(Map<Character,Node>nodeCollection,String[]words)
    {
        for(int i=0;i<words.length-1;i++)
        {
            char[] w1=words[i].toCharArray();
            char[] w2=words[i+1].toCharArray();
            boolean added=false;
            for(int j=0;j<Math.min(w1.length,w2.length);j++)
            {
                if(w1[j]!=w2[j])
                {
                    added=true;
                    Node n1=nodeCollection.get(w1[j]);
                    Node n2=nodeCollection.get(w2[j]);
                    n1.nextNodes.add(n2);
                    n2.prevNodes.add(n1);
                    break;
                }
            }
            if(w1.length>w2.length&&!added)
                return false;
        }
        return true;
    }
    public void BuildAllNodes(Map<Character,Node>nodeCollection,String[]words)
    {
        for(int i=0;i<words.length;i++)
        {
            char[]word=words[i].toCharArray();
            for(int j=0;j<word.length;j++)
            {
                if(!nodeCollection.containsKey(word[j]))
                {
                    Node node=new Node(word[j]);
                    nodeCollection.put(word[j],node);
                }
            }
        }
    }
    
}

class Solution {
    class Node{
        char letter;
        int level=0;
        Set<Node>nextNodes;
        Set<Node>prevNodes;
        public Node(char letter)
        {
            this.letter=letter;
            nextNodes=new HashSet<>();
            prevNodes=new HashSet<>();
        }
    }
    int count=0;
    String result="";
    private Map<Character, Boolean> seen = new HashMap<>();
    public String alienOrder(String[] words) {
        Map<Character,Node>nodeCollection=new HashMap<>();
        BuildAllNodes(nodeCollection,words);
        if(!BuildRelationship(nodeCollection,words))
            return "";
        
        for(Map.Entry<Character,Node>entry:nodeCollection.entrySet())
        {
            Node cnode=entry.getValue();
            boolean check = dfs(cnode.letter,nodeCollection);
            if (!check) return "";
        }
        if(result.length()!=nodeCollection.size())
            return "";
        return result;
        
    }
    private boolean dfs(Character c,Map<Character,Node>nodeCollection) {
        if (seen.containsKey(c)) {
            return seen.get(c); // If this node was grey (false), a cycle was detected.
        }
        seen.put(c, false);
        for (Node next : nodeCollection.get(c).nextNodes) {
            boolean check = dfs(next.letter,nodeCollection);
            if (!check) return false;
        }
        seen.put(c, true);
        result=Character.toString(c)+result;
        return true;
    }
    public boolean BuildRelationship(Map<Character,Node>nodeCollection,String[]words)
    {
        for(int i=0;i<words.length-1;i++)
        {
            char[] w1=words[i].toCharArray();
            char[] w2=words[i+1].toCharArray();
            boolean added=false;
            for(int j=0;j<Math.min(w1.length,w2.length);j++)
            {
                if(w1[j]!=w2[j])
                {
                    added=true;
                    Node n1=nodeCollection.get(w1[j]);
                    Node n2=nodeCollection.get(w2[j]);
                    n1.nextNodes.add(n2);
                    n2.prevNodes.add(n1);
                    break;
                }
            }
            if(w1.length>w2.length&&!added)
                return false;
        }
        return true;
    }
    public void BuildAllNodes(Map<Character,Node>nodeCollection,String[]words)
    {
        for(int i=0;i<words.length;i++)
        {
            char[]word=words[i].toCharArray();
            for(int j=0;j<word.length;j++)
            {
                if(!nodeCollection.containsKey(word[j]))
                {
                    Node node=new Node(word[j]);
                    nodeCollection.put(word[j],node);
                }
            }
        }
    }
    
}