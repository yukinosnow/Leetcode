class Solution {
    public boolean validTree(int n, int[][] edges) {
        Set<Integer>visited=new HashSet<>();
        Queue<Integer>nextRound=new LinkedList<>();
        Queue<Integer>processing=new LinkedList<>();
        Map<Integer,List<Integer>>map=new HashMap<>();
        InitialMap(n,edges,map);
        if(!dfs(0,-1,map,visited))
            return false;
        return visited.size()==n;
    }
    public boolean dfs(int node, int parent, Map<Integer,List<Integer>>map,Set<Integer>visited)
    {
        List<Integer>nextNode=map.get(node);
        visited.add(node);
        for(Integer next:nextNode)
        {
            if(next!=parent)
            {
                if(visited.contains(next)||!dfs(next,node,map,visited))
                    return false;
            }
        }
        
        return true;
    }
    public void InitialMap(int n, int[][] edges, Map<Integer,List<Integer>>map)
    {
        for(int i=0;i<n;i++)
            map.put(i,new ArrayList<Integer>());
        for(int i=0;i<edges.length;i++)
        {
            int a= edges[i][0];
            int b=edges[i][1];
            map.get(a).add(b);
            map.get(b).add(a);
        }
    }
}