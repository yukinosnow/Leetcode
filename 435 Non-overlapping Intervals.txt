dp
class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        int result=0;
        if(intervals.length<=1)
            return 0;
        Arrays.sort(intervals,(int[]a, int[]b)->(a[0]-b[0]));
        int[]interset=new int[]{intervals[0][0],intervals[0][1]};
        List<int[]>ref=new ArrayList<>();
        ref.add(intervals[0]);
        for(int i=1;i<intervals.length;i++)
        {
            if(intervals[i][0]>=interset[1])
            {
                result+=helper(ref,interset);
                ref.clear();
                interset[0]=intervals[i][0];
                interset[1]=intervals[i][1];
            }
            else
            {
                interset[0]=Math.min(interset[0],intervals[i][0]);
                interset[1]=Math.max(interset[1],intervals[i][1]);
            }
            ref.add(intervals[i]);
        }
        result+=helper(ref,interset);
        return result;
    }
    public int helper(List<int[]>ref, int[]interset)
    {
        if(ref.size()<=1)
            return 0;
        int total=ref.size();
        int offset=interset[0];
        int range=interset[1];
        int dp[]=new int[range-offset+1];
        int count=0;
        while(count<ref.size())
        {
            for(int i=0;i<dp.length;i++)
            {
                int[]time=ref.get(count);
                if(i>=time[1]-offset)
                {
                    dp[i]=Math.max(dp[time[0]-offset]+1,dp[i]);
                }
            }
            count++;
        }
        return total-dp[dp.length-1];
    }
}
greddy
class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        int result=0;
        if(intervals.length<=1)
            return 0;
        Arrays.sort(intervals,(int[]a, int[]b)->(a[0]-b[0]));
        int last=0;
        for(int i=1;i<intervals.length;i++)
        {
            if(intervals[last][1]<=intervals[i][0])
                last=i;
            else
            {
                if(intervals[last][1]>intervals[i][1])
                    last=i;
                result++;
            }
        }
        return result;
    }
}

