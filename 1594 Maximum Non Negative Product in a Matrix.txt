class Solution {
    public int maxProductPath(int[][] grid) {
        int mod=1000000007;
        long[][]max=new long[grid.length][grid[0].length];
        long[][]min=new long[grid.length][grid[0].length];
        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[0].length;j++)
            {
                max[i][j]=Long.MIN_VALUE;
                min[i][j]=Long.MAX_VALUE;
            }
        }
        if(grid[0][0]>=0)
            max[0][0]=(long)grid[0][0];
        if(grid[0][0]<=0)
            min[0][0]=(long)grid[0][0];
        for(int i=1;i<grid.length;i++)
        {
            if(grid[i][0]<0)
            {
                if(max[i-1][0]!=Long.MIN_VALUE)
                    min[i][0]=(max[i-1][0]*grid[i][0]);
                if(min[i-1][0]!=Long.MAX_VALUE)
                    max[i][0]=(min[i-1][0]*grid[i][0]);
            }
            else if(grid[i][0]>0)
            {
                if(max[i-1][0]!=Long.MIN_VALUE)
                    max[i][0]=(max[i-1][0]*grid[i][0]);
                if(min[i-1][0]!=Long.MAX_VALUE)
                    min[i][0]=(min[i-1][0]*grid[i][0]);
            }
            else
            {
                max[i][0]=0;
                min[i][0]=0;
            }
        }
        for(int j=1;j<grid[0].length;j++)
        {
            if(grid[0][j]<0)
            {
                if(max[0][j-1]!=Long.MIN_VALUE)
                    min[0][j]=(max[0][j-1]*grid[0][j]);
                if(min[0][j-1]!=Long.MAX_VALUE)
                    max[0][j]=(min[0][j-1]*grid[0][j]);
            }
            else if(grid[0][j]>0)
            {
                if(max[0][j-1]!=Long.MIN_VALUE)
                    max[0][j]=(max[0][j-1]*grid[0][j]);
                if(min[0][j-1]!=Long.MAX_VALUE)
                    min[0][j]=(min[0][j-1]*grid[0][j]);
            }
            else
            {
                max[0][j]=0;
                min[0][j]=0;
            }
        }
        for(int i=1;i<grid.length;i++)
        {
            for(int j=1;j<grid[0].length;j++)
            {
                if(grid[i][j]>0)
                {
                    if(max[i][j-1]!=Long.MIN_VALUE)
                        max[i][j]=Math.max(max[i][j],max[i][j-1]*grid[i][j]);
                    if(max[i-1][j]!=Long.MIN_VALUE)
                        max[i][j]=Math.max(max[i][j],max[i-1][j]*grid[i][j]);
                    if(min[i][j-1]!=Long.MAX_VALUE)
                        min[i][j]=Math.min(min[i][j],min[i][j-1]*grid[i][j]);
                    if(min[i-1][j]!=Long.MAX_VALUE)
                        min[i][j]=Math.min(min[i][j],min[i-1][j]*grid[i][j]);
                    
                }
                else if(grid[i][j]<0)
                {
                    if(max[i][j-1]!=Long.MIN_VALUE)
                        min[i][j]=Math.min(min[i][j],max[i][j-1]*grid[i][j]);
                    if(max[i-1][j]!=Long.MIN_VALUE)
                        min[i][j]=Math.min(min[i][j],max[i-1][j]*grid[i][j]);
                    if(min[i][j-1]!=Long.MAX_VALUE)
                        max[i][j]=Math.max(max[i][j],min[i][j-1]*grid[i][j]);
                    if(min[i-1][j]!=Long.MAX_VALUE)
                        max[i][j]=Math.max(max[i][j],min[i-1][j]*grid[i][j]);
                }
                else
                {
                    max[i][j]=0;
                    min[i][j]=0;
                }
            }
        }
        if(max[max.length-1][max[0].length-1]!=Long.MIN_VALUE)
            return (int)(max[max.length-1][max[0].length-1]%mod);
        return -1;
    }
}