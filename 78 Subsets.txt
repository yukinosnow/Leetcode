class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>>result=new ArrayList<>();
        int count=(int)Math.pow(2,nums.length);
        for(int i=0;i<count;i++)
        {
            List<Integer>temp=new ArrayList<>();
            int tempNum=i;
            for(int j=0;j<nums.length;j++)
            {
                if((tempNum&1)==1)
                    temp.add(nums[j]);
                tempNum=tempNum>>1;
            }
            result.add(temp);
        }
        return result;
    }
}

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        return helper(nums,0);
    }
    public List<List<Integer>>helper(int[]nums, int count)
    {
        List<List<Integer>>result=new ArrayList<>();
        if(count>=nums.length)
        {
            List<Integer>empty=new ArrayList<>();
            result.add(empty);
        }
        else
        {
            int num=nums[count];
            List<List<Integer>>temp=helper(nums,count+1);
            for(int i=0;i<temp.size();i++)
            {
                List<Integer>copy=new ArrayList<>(temp.get(i));
                copy.add(num);
                result.add(copy);
                result.add(temp.get(i));
            }
        }
        return result;
            
    }
}

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>>result=new ArrayList<>();
        List<Integer>empty=new ArrayList<>();
        result.add(empty);
        for(int i=0;i<nums.length;i++)
        {
            int length=result.size();
            for(int j=0;j<length;j++)
            {
                List<Integer>copy=new ArrayList<>(result.get(j));
                copy.add(nums[i]);
                result.add(copy);
            }
        }
        return result;
    }
}

