/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        return Divide(lists);
    }
    public ListNode Divide(ListNode[]lists)
    {
        if(lists.length==1)
            return lists[0];
        if(lists.length==0)
            return null;
        int mid=0+lists.length/2;
        ListNode[]lista=new ListNode[mid];
        ListNode[]listb=new ListNode[lists.length-mid];
        for(int i=0;i<mid;i++)
            lista[i]=lists[i];
        for(int i=mid;i<lists.length;i++)
            listb[i-mid]=lists[i];
        ListNode divideA=Divide(lista);
        ListNode divideB=Divide(listb);
        return Merge(divideA,divideB);
    }
    public ListNode Merge(ListNode a, ListNode b)
    {
        if(a==null)
            return b;
        if(b==null)
            return a;
        ListNode result=new ListNode();
        ListNode curr=result;
        while(a!=null&&b!=null)
        {
            if(a.val<=b.val)
            {
                curr.next=a;
                a=a.next;
            }
            else
            {
                curr.next=b;
                b=b.next;
            }
            curr=curr.next;
        }
        while(a!=null)
        {
            curr.next=a;
            a=a.next;
            curr=curr.next;
        }
        while(b!=null)
        {
            curr.next=b;
            b=b.next;
            curr=curr.next;
        }
        return result.next;
    }
}