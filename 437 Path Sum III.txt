/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int result=0;
    public int pathSum(TreeNode root, int targetSum) {
        Map<Integer,Integer>map=new HashMap<>();
        map.put(0,1);
        helper(root,targetSum,map,0);
        return result;
    }
    public void helper(TreeNode node, int targetSum,Map<Integer,Integer>map,int sum)
    {
        if(node==null)
            return ;
        int newSum=sum+node.val;
        if(map.containsKey(newSum-targetSum))
            result+=map.get(newSum-targetSum);
        map.put(newSum,map.getOrDefault(newSum,0)+1);
        
        helper(node.left,targetSum,map,newSum);
        helper(node.right,targetSum,map,newSum);
        
        int remain=map.get(newSum);
        remain--;
        if(remain==0)
            map.remove(newSum);
        else
            map.put(newSum,remain);
    }
}