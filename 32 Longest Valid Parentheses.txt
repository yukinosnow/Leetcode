class Solution {
    public int longestValidParentheses(String s) {
        Stack<Character>stack=new Stack<>();
        int left=0;
        int right=0;
        int result=0;
        char[]word=s.toCharArray();
        for(int i=0;i<word.length;i++)
        {
            char c=word[i];
            if(c=='(')
            {
                left++;
                stack.push(c);
            }
            else
            {
                if(right<left)
                {
                    right++;
                    stack.push(c);
                }
                else
                {
                    result=Math.max(ProcessStack(stack),result);
                    left=0;
                    right=0;
                }
            }
        }
        result=Math.max(ProcessStack(stack),result);
        return result;
        
    }
    public int ProcessStack(Stack<Character>stack)
    {
        int result=0;
        int localResult=0;
        int localRight=0;
        int localLeft=0;
        while(!stack.isEmpty())
        {
            char c=stack.pop();
            if(c==')')
            {
                localRight++;
                localResult++;
            }
            else
            {
                if(localLeft<localRight)
                {
                    localLeft++;
                    localResult++;
                }
                else
                {
                    result=Math.max(localResult,result);
                    localLeft=0;
                    localRight=0;
                    localResult=0;
                }
            }
        }
        result=Math.max(localResult,result);
        return result;
    }
}