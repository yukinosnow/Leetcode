class Solution {
    public int minimumXORSum(int[] nums1, int[] nums2) {
        int[][]ref=new int[nums1.length][nums2.length];
        for(int i=0;i<nums1.length;i++)
        {
            for(int j=0;j<nums2.length;j++)
            {
                ref[i][j]=nums1[i]^nums2[j];
            }
        }
        int[]memo=new int[(int)Math.pow(2,14)];
        Arrays.fill(memo,-1);
        return FindMinSum(nums1,nums2,memo,ref,0,0);
        
    }
    public int FindMinSum(int[]nums1, int[] nums2, int[]memo, int[][] ref,int mask, int position)
    {
        if(position>=nums1.length)
            return 0;
        if(memo[mask]!=-1)
            return memo[mask];
        int min=Integer.MAX_VALUE;
        for(int i=0;i<nums2.length;i++)
        {
            if((mask&1<<i)!=0)
                continue;
            min=Math.min(min,FindMinSum(nums1,nums2,memo,ref,mask|1<<i,position+1)+ref[position][i]);
        }
        memo[mask]=min;
        return min;
        
    }
}