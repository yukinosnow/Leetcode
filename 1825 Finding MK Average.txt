class MKAverage {

    List<Integer> list;
    Queue<Integer> q;
    int m, k;
    long sum;
    
    public MKAverage(int m, int k) {
        list = new ArrayList<>();
        q = new LinkedList<>();
        this.m = m;
        this.k = k;
        sum = 0;
    }
    
    public void addElement(int num) {
        if (list.size() == m) {
            remove();
        }
        int index = Collections.binarySearch(list, num);
        if (index < 0) {
            index = -(index + 1);
        }
        if (k * 2 <= list.size()) {
            if (index < k) {
                sum += list.get(k - 1);
            } else if (index <= list.size() - k) {
                sum += num;
            } else {
                sum += list.get(list.size() - k);
            }
        }
        list.add(index, num);
        q.offer(num);
    }
    
    private void remove() {
        int num = q.poll();
        int index = Collections.binarySearch(list, num);
        if (k * 2 + 1 <= list.size()) {
            if (index < k) {
                sum -= list.get(k);
            } else if (index < list.size() - k) {
                sum -= num;
            } else {
                sum -= list.get(list.size() - k - 1);
            }
        }
        list.remove(index);
    }
    
    public int calculateMKAverage() {
        if (list.size() < m) {
            return -1;
        }
        return (int)(sum / (m - k * 2));
    }
}