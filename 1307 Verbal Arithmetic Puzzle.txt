class Solution {
    public boolean isSolvable(String[] words, String result) {
        Map<Character,Integer>map=new HashMap<>();
        int maxLength=0;
        for(int i=0;i<words.length;i++)
        {
            char[]word=words[i].toCharArray();
            for(int j=0;j<word.length;j++)
            {
                maxLength=Math.max(word.length,maxLength);
                if(!map.containsKey(word[j]))
                    map.put(word[j],-1);
            }
        }
        char[]right=result.toCharArray();
        if(maxLength>right.length)//need to make sure the left length is shorter than the right length
            return false;
        for(int i=0;i<right.length;i++)
        {
            if(!map.containsKey(right[i]))
                map.put(right[i],-1);
        }
        Set<Integer>visited=new HashSet<>();
        return helper(words,visited,map,right,0,0,0);
    }
    public boolean helper(String[]leftS, Set<Integer>visited, Map<Character,Integer>map, char[]right, int offset,int carry, int pos)
    {
        if(offset==right.length)
        {
            if(carry==0)//need to make sure there is not any left over carry
                return true;
            return false;
        }
        if(pos>=leftS.length)
        {
            int car=carry%10;
            carry=carry/10;
            char rightC=right[right.length-1-offset];
            if(offset==right.length-1&&car==0&&right.length!=1)//need to make sure there is no leading zero for at least 2 digit number
                return false;
            if(map.get(rightC)==-1&&!visited.contains(car))
            {
                map.put(rightC,car);
                visited.add(car);
                if(helper(leftS,visited,map,right,offset+1,carry,0))
                    return true;
                visited.remove(car);
                map.put(rightC,-1);
            }
            else if(map.get(rightC)==car)
            {
                if(helper(leftS,visited,map,right,offset+1,carry,0))
                    return true;
            }
            else
                return false;
        }
        else
        {
            if(offset<leftS[pos].length())
            {
                String left=leftS[pos];
                char leftC=left.charAt(left.length()-1-offset);
                int val=0;
                int start=0;
                if(offset==left.length()-1&&left.length()!=1)//need to make sure there is no leading zero for at least 2 digit number
                    start=1;
                if(map.get(leftC)==-1)
                {
                    for(int i=start;i<10;i++)
                    {
                        if(!visited.contains(i))
                        {
                            visited.add(i);
                            map.put(leftC,i);
                            if(helper(leftS,visited,map,right,offset,carry+i,pos+1))
                                return true;
                            visited.remove(i);
                            map.put(leftC,-1);
                        }
                    }
                    
                }
                else
                {
                    val=map.get(leftC);
                    if(offset==leftS.length-1&&val==0&&leftS.length!=1)//need to make sure there is no leading zero for at least 2 digit number
                        return false;
                    if(helper(leftS,visited,map,right,offset,carry+val,pos+1))
                        return true;
                }
            }
            else
            {
                if(helper(leftS,visited,map,right,offset,carry,pos+1))
                    return true;
            }
        }
        return false;
        
    }
}