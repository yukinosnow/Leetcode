class Solution {
    int M = 1000000007;
    public int rectangleArea(int[][] rectangles) {
        long area = 0;
        int STRAT = 1,END = -1;
        ArrayList<long[]> intervals = new ArrayList<>();
        ArrayList<long[]> Xcords = new ArrayList<>();
        long preX = -1;
        for (int[] rect: rectangles) {
            if (rect[2] > rect[0]) {
                Xcords.add(new long[]{rect[0],rect[1],rect[3],STRAT});
                Xcords.add(new long[]{rect[2],rect[1],rect[3],END});
            }
        }
        Collections.sort(Xcords,(a,b) -> (int) (a[0]-b[0]));
        for (long[] seg: Xcords) {
            if (seg[3] == STRAT) {
                if (preX >= 0) {
                    area += (seg[0] - preX)*getSum(intervals);
                }
                preX = seg[0];
                add(intervals,new long[]{seg[1],seg[2]});
            }else {
                area += (seg[0] - preX)*getSum(intervals);
                preX = seg[0];
                remove(intervals,new long[]{seg[1],seg[2]});
            }
        }
        return (int) (area%M);
    }
    public void add(ArrayList<long[]> intervals,long[] seg) {
        int index = Collections.binarySearch(intervals,seg,(a,b) -> (int) (a[0]-b[0]));
        if (index < 0) index = -(index+1);
        intervals.add(index,seg);
    }
    public void remove(ArrayList<long[]> intervals,long[] seg) {
        for (int i=0;i<intervals.size();i++) {
            if (intervals.get(i)[0] == seg[0] && intervals.get(i)[1] == seg[1]) {
                intervals.remove(i);
                break;
            }
        }
    }
    // already sort by x coodinates
    public int getSum(ArrayList<long[]> intervals) {
        long[] pre = {0,0};
        int res = 0;
        for(long[] interval: intervals) {
            if (interval[0] > pre[1]) {
                res += pre[1] - pre[0];
                pre[0] = interval[0];
                pre[1] = interval[1];
            }else {
                pre[1] = Math.max(pre[1],interval[1]);
            }
        }
        res += pre[1] - pre[0];
        return res;
    }
}